#define EPSILON 0.0001
#define MAX_STEPS 500
#define MIN_DIST 0.0
#define MAX_DIST 25.0

#define AMBIENT 0.1
#define EDGE_THICKNESS 0.015
#define SHADES 4.0

mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, -s, 0),
        vec3(s, c, 0),
        vec3(0, 0, 1)
    );
}

float unionSDF(float distA, float distB) {
    return min(distA, distB);
}

float sphereSDF(vec3 samplePoint) {
    return length(samplePoint) - 0.1;
}

float torusSDF(vec3 p, vec2 t) {
	return length(vec2(length(p.xz)-t.x,p.y))-t.y;
}

float halfCageSDF(vec3 p) {
    float cageOffset = 0.3926991;
    float torus1 = torusSDF(rotateX(1.5708) * p, vec2(1.5, 0.02));
    float torus2 = torusSDF(rotateZ(cageOffset) * rotateX(1.5708) * p, vec2(1.5, 0.02));
    float torus3 = torusSDF(rotateZ(2.0 * cageOffset) * rotateX(1.5708) * p, vec2(1.5, 0.02));
    float torus4 = torusSDF(rotateZ(3.0 * cageOffset) * rotateX(1.5708) * p, vec2(1.5, 0.02));
    float torus5 = torusSDF(rotateZ(4.0 * cageOffset) * rotateX(1.5708) * p, vec2(1.5, 0.02));

    return unionSDF(torus1, unionSDF(torus2, unionSDF(torus3, unionSDF(torus4, torus5))));
}

float spheresSDF(vec3 p) {
    float timeOffset = 0.448798951; // radians increment
    float cageOffset = 0.3926991;
    mat3 revolution = rotateX(2.0 * 3.14159 * 0.1 * iTime);
    
    //rotateY(cageOffset) * rotateX(timeOffset) 
    float sphere1 = sphereSDF(revolution * p + vec3(0.0, -1.5, 0.0));
	float sphere2 = sphereSDF(rotateX(cageOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
    float sphere3 = sphereSDF(rotateX(2.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
    float sphere4 = sphereSDF(rotateX(3.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
    float sphere5 = sphereSDF(rotateX(4.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
	float sphere6 = sphereSDF(rotateX(5.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
    float sphere7 = sphereSDF(rotateX(6.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));
	float sphere8 = sphereSDF(rotateX(7.0 * timeOffset) * revolution * p + vec3(0.0, -1.5, 0.0));

    //return unionSDF(sphere1, sphere2);
    float unionSpheres1 = unionSDF(sphere6, unionSDF(sphere7, sphere8));
    return unionSDF(sphere1, unionSDF(sphere2, unionSDF(sphere3, unionSDF(sphere4, unionSDF(sphere5, unionSpheres1)))));
}

float cageAndSpheres(vec3 p) {
 	float cageSDF = unionSDF(halfCageSDF(p), halfCageSDF(rotateY(1.5708) * p));
    float spheresSDF = spheresSDF(p);
    return unionSDF(cageSDF, spheresSDF); 
}

float sceneSDF(vec3 p) {
    return cageAndSpheres(p);
    //return cageAndSpheres(rotateZ(1.5708) * p);
}

float shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {
    float depth = start;
    for (int i = 0; i < MAX_STEPS; i++) {
        float dist = sceneSDF(eye + depth * marchingDirection);
        if (dist < EPSILON) {
			return depth;
        }
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}
  

vec3 rayDirection(float fov, vec2 size, vec2 fragCoord)
{
    vec2 xy = fragCoord - (size / 2.0);
    float z = size.y / tan(radians(fov) / 2.0);
    return normalize(vec3(xy, -z));
}

vec3 EstimateNormal(vec3 point)
{
    return normalize(vec3(sceneSDF(vec3(point.x + EPSILON, point.y, point.z)) - sceneSDF(vec3(point.x - EPSILON, point.y, point.z)),
                          sceneSDF(vec3(point.x, point.y + EPSILON, point.z)) - sceneSDF(vec3(point.x, point.y - EPSILON, point.z)),
                          sceneSDF(vec3(point.x, point.y, point.z + EPSILON)) - sceneSDF(vec3(point.x, point.y, point.z - EPSILON))));
}

mat4 lookAt(vec3 camera, vec3 target, vec3 up) {
    vec3 f = normalize(target - camera);
    vec3 s = cross(f, up);
    vec3 u = cross(s, f);
    
    return mat4(vec4(s, 0.0),
        		vec4(u, 0.0),
        		vec4(-f, 0.0),
        		vec4(0.0, 0.0, 0.0, 1));
}

vec3 ComputeLighting(vec3 point, vec3 lightDir, vec3 lightColor)
{
    vec3 color = vec3(AMBIENT);
    float intensity = dot(EstimateNormal(point), normalize(lightDir));
    intensity = ceil(intensity * SHADES) / SHADES;
    intensity = max(intensity, AMBIENT);
    color = lightColor * intensity;
    return color;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);
    vec3 origin = vec3(0.0, 10.0, 10.0);
    mat4 viewTransform = lookAt(origin, vec3(0.0), vec3(0.0, 1.0, 0.0));
    dir = (viewTransform * vec4(dir, 0.0)).xyz;
    
    float dist = shortestDistanceToSurface(origin, dir, MIN_DIST, MAX_DIST);
    
    if (dist > MAX_DIST - EPSILON) // No hit
    {
        fragColor = vec4(0.6);
        return;
    }
    
    vec3 hitPoint = origin + (dist * dir);
    vec3 lightDir = vec3(6.0, 4.0, 5.0);
    vec3 color = vec3(1.0, 0.5, 0.1);
    
    color = ComputeLighting(hitPoint, lightDir, color);
    
    fragColor = vec4(color, 1.0);
}